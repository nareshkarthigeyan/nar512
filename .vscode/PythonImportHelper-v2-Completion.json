[
    {
        "label": "nPi",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def nPi(n):\n    piDigits = \"14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316271201909145648566923460348610454326648213393607260249141273\"\n    return format(int(piDigits[n % len(piDigits): (n % len(piDigits)) + 4]) % 65536, '016b')\ndef left_rotate(x, n, w=32):\n    n = n % w\n    return ((x << n) | (x >> (w - n))) & ((1 << w) - 1)  # Mask to w bits\ndef right_rotate(x, n, w=32):\n    n = n % w\n    return ((x >> n) | (x << (w - n))) & ((1 << w) - 1)  # Mask to w\ndef sigma(input):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "left_rotate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def left_rotate(x, n, w=32):\n    n = n % w\n    return ((x << n) | (x >> (w - n))) & ((1 << w) - 1)  # Mask to w bits\ndef right_rotate(x, n, w=32):\n    n = n % w\n    return ((x >> n) | (x << (w - n))) & ((1 << w) - 1)  # Mask to w\ndef sigma(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2) \n    a = num ^ piVal",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "right_rotate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def right_rotate(x, n, w=32):\n    n = n % w\n    return ((x >> n) | (x << (w - n))) & ((1 << w) - 1)  # Mask to w\ndef sigma(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2) \n    a = num ^ piVal\n    b = right_rotate(num, 7, 32) ^ left_rotate(num, 3, 16)\n    c = (num + piVal) % 4294967295\n    result = a ^ b ^ c ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "sigma",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def sigma(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2) \n    a = num ^ piVal\n    b = right_rotate(num, 7, 32) ^ left_rotate(num, 3, 16)\n    c = (num + piVal) % 4294967295\n    result = a ^ b ^ c \n    return format(result % 512, '032b')\ndef bigM(input):\n    num = int(input, 2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bigM",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def bigM(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2)\n    a = right_rotate(num, 23, 32)\n    b = left_rotate(num, 11, 32)\n    c = (num * piVal) % 512\n    res = a ^ b ^ c\n    return format(res % 512, '032b')\ndef padding(input):\n    length = len(input)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def padding(input):\n    length = len(input)\n    res = ''.join(format(ord(i), '08b') for i in input)\n    res += \"1\"\n    while len(res) % 512 != 504:\n        res += \"0\"\n    res += format(length, '08b')\n    return res\ndef compartmentalize(input):\n    res = []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "compartmentalize",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def compartmentalize(input):\n    res = []\n    for i in range(0, len(input), 32):\n        res.append(input[i:i+32]);\n    return res\ndef parsing(input):\n    res = []\n    for i in input:\n        res.append(i)\n    for i in range(len(input), 64):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "parsing",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def parsing(input):\n    res = []\n    for i in input:\n        res.append(i)\n    for i in range(len(input), 64):\n        val = int(sigma(input[i % len(input)]), 2) \n        val ^= int(bigM(input[(i + 8) % len(input)]), 2)\n        val += left_rotate(val + i * 17, i % 32)\n        val += int(res[i - 16], 2)\n        val ^= right_rotate(int(res[i - 2], 2) * 19, i % 32)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "compression",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def compression(input):\n    a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p = [\n    0xcbbb9d5d, 0x629a292a, 0x9159015a, 0x152fecd8,\n    0x67332667, 0x8eb44a87, 0xdb0c2e0d, 0x47b5481d,\n    0xe19b48a8, 0xc5c95a63, 0xa1e38b93, 0x29d070bb,\n    0x5c26c926, 0x33a7d98e, 0x4aab5db7, 0x4f7a04dd\n]\n    for i in range(len(input)):\n        t1 = (int(input[i], 2) + int(sigma(format(e, '032b')), 2) + int(bigM(format(g, '032b')), 2) + left_rotate(a, 5, 32)) % 4294967295\n        t2 = (int(bigM(format(j, '032b')), 2) + int(sigma(format(l, '032b')), 2) + right_rotate(n, 7, 32)) % 4294967295",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "toHash",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def toHash(input):\n    hash = ''\n    for i in input:\n        num = int(i, 2);\n        hash += format(num, 'x')\n    return hash\ndef nar512(input):\n    padded = padding(input)\n    # print(padded)\n    parts = compartmentalize(padded)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "nar512",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def nar512(input):\n    padded = padding(input)\n    # print(padded)\n    parts = compartmentalize(padded)\n    parsed = parsing(parts)\n    # print(len(parsed))\n    # print(toHash(parsed))\n    compressed = compression(parsed)\n    return toHash(compressed)\nstring = nar512(\"NARESH KARTHIGEYAN\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "string = nar512(\"NARESH KARTHIGEYAN\")\nnonce = 0\nwhile not string.startswith(\"0\"):\n    new_string = f\"{string}{nonce:06d}\" \n    string = nar512(new_string)\n    print(string)\n    nonce += 1\nprint(string)\nprint(nonce)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "nonce",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "nonce = 0\nwhile not string.startswith(\"0\"):\n    new_string = f\"{string}{nonce:06d}\" \n    string = nar512(new_string)\n    print(string)\n    nonce += 1\nprint(string)\nprint(nonce)",
        "detail": "main",
        "documentation": {}
    }
]