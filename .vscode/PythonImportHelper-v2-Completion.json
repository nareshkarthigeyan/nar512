[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "nPi",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def nPi(n):\n    piDigits = (\n        \"14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316271201909145648566923460348610454326648213393607260249141273\"\n    )\n    n = n % len(piDigits)\n    slice_length = (n % 7) + 4  # Dynamically vary slice length\n    return format(int(piDigits[n:n + slice_length]) % 65536, \"016b\")\ndef left_rotate(x, n, w=32):\n    return ((x << n) | (x >> (w - n))) & ((1 << w) - 1)\ndef right_rotate(x, n, w=32):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "left_rotate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def left_rotate(x, n, w=32):\n    return ((x << n) | (x >> (w - n))) & ((1 << w) - 1)\ndef right_rotate(x, n, w=32):\n    return ((x >> n) | (x << (w - n))) & ((1 << w) - 1)\ndef sigma(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2)\n    a = right_rotate(num, 19, 32) ^ left_rotate(num, 13, 32)\n    b = (num * piVal + 314159) % 4294967295\n    c = (num ^ (piVal >> 2)) * 37",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "right_rotate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def right_rotate(x, n, w=32):\n    return ((x >> n) | (x << (w - n))) & ((1 << w) - 1)\ndef sigma(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2)\n    a = right_rotate(num, 19, 32) ^ left_rotate(num, 13, 32)\n    b = (num * piVal + 314159) % 4294967295\n    c = (num ^ (piVal >> 2)) * 37\n    result = a ^ b ^ c\n    return format(result % 4294967295, \"032b\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "sigma",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def sigma(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2)\n    a = right_rotate(num, 19, 32) ^ left_rotate(num, 13, 32)\n    b = (num * piVal + 314159) % 4294967295\n    c = (num ^ (piVal >> 2)) * 37\n    result = a ^ b ^ c\n    return format(result % 4294967295, \"032b\")\ndef bigM(input):\n    num = int(input, 2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bigM",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def bigM(input):\n    num = int(input, 2)\n    piVal = int(nPi(num), 2)\n    a = right_rotate(num, 23, 32)\n    b = left_rotate(num, 11, 32)\n    c = (num * piVal) % 4294967295\n    res = a ^ b ^ c\n    return format(res % 4294967295, \"032b\")\ndef padding(input):\n    if isinstance(input, bytes):  # If input is bytes, decode it",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def padding(input):\n    if isinstance(input, bytes):  # If input is bytes, decode it\n        input = input.decode('utf-8')\n    length = len(input) * 8  # Convert character count to bit length\n    res = ''.join(format(ord(i), '08b') for i in input)\n    res += \"1\"\n    while len(res) % 512 != 384:\n        res += \"0\"\n    res += format(length, '0128b')  # 128-bit length encoding\n    return res",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "compartmentalize",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def compartmentalize(input):\n    return [input[i:i + 32] for i in range(0, len(input), 32)]\ndef parsing(input):\n    res = list(input)\n    for i in range(len(input), 64):\n        val = int(sigma(input[i % len(input)]), 2)\n        val ^= int(bigM(input[(i + 8) % len(input)]), 2)\n        val = (val + left_rotate(val + i * 17, i % 32)) % 4294967295\n        val = (val + int(res[i - 16], 2)) % 4294967295\n        val ^= right_rotate(int(res[i - 2], 2) * 19, i % 32)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "parsing",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def parsing(input):\n    res = list(input)\n    for i in range(len(input), 64):\n        val = int(sigma(input[i % len(input)]), 2)\n        val ^= int(bigM(input[(i + 8) % len(input)]), 2)\n        val = (val + left_rotate(val + i * 17, i % 32)) % 4294967295\n        val = (val + int(res[i - 16], 2)) % 4294967295\n        val ^= right_rotate(int(res[i - 2], 2) * 19, i % 32)\n        res.append(format(val % 4294967295, \"032b\"))\n    return res",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "golder_ratio",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def golder_ratio():\n    return (1 + 5 ** 0.5) / 2\ndef salting(input):\n    res = []\n    for i in range(len(input)):\n        a = int(input[i], 2)\n        index = int(input[(i + 1) % len(input)], 2)\n        index = int(nPi(index), 2)\n        b = int(input[(i + index) % len(input)], 2)\n        res.append(format(int(a * golder_ratio() + b), \"032b\"))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "salting",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def salting(input):\n    res = []\n    for i in range(len(input)):\n        a = int(input[i], 2)\n        index = int(input[(i + 1) % len(input)], 2)\n        index = int(nPi(index), 2)\n        b = int(input[(i + index) % len(input)], 2)\n        res.append(format(int(a * golder_ratio() + b), \"032b\"))\n    return res\ndef compression(input):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "compression",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def compression(input):\n    state = [\n        0xcbbb9d5d, 0x629a292a, 0x9159015a, 0x152fecd8,\n        0x67332667, 0x8eb44a87, 0xdb0c2e0d, 0x47b5481d,\n        0xe19b48a8, 0xc5c95a63, 0xa1e38b93, 0x29d070bb,\n        0x5c26c926, 0x33a7d98e, 0x4aab5db7, 0x4f7a04dd\n    ]\n    for i in range(len(input)):\n        t1 = (int(input[i], 2) + int(sigma(format(state[4], '032b')), 2) + int(bigM(format(state[6], '032b')), 2) + left_rotate(state[0], 5, 32)) % 4294967295\n        t2 = (int(bigM(format(state[9], '032b')), 2) + int(sigma(format(state[11], '032b')), 2) + right_rotate(state[13], 7, 32)) % 4294967295",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "toHash",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def toHash(input):\n    hash = ''\n    for i in input:\n        num = int(i, 2);\n        hash += format(num, 'x')\n    return hash\ndef nar512(input):\n    padded = padding(input)\n    parts = compartmentalize(padded)\n    parsed = parsing(parts)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "nar512",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def nar512(input):\n    padded = padding(input)\n    parts = compartmentalize(padded)\n    parsed = parsing(parts)\n    salted = salting(parsed)\n    compressed = compression(salted)\n    return toHash(compressed)\nstr = \"abcsdvkjnsdjkvnsd\"\nstart_time = time.time()\nstring = nar512(str.encode())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "str = \"abcsdvkjnsdjkvnsd\"\nstart_time = time.time()\nstring = nar512(str.encode())\nend_time = time.time()\nprint(f\"NAR512: {string}\")\nprint(f\"Length of hashed value: {len(string)}\")\nprint(f\"Time taken for NAR512: {end_time - start_time} seconds\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "start_time = time.time()\nstring = nar512(str.encode())\nend_time = time.time()\nprint(f\"NAR512: {string}\")\nprint(f\"Length of hashed value: {len(string)}\")\nprint(f\"Time taken for NAR512: {end_time - start_time} seconds\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "string = nar512(str.encode())\nend_time = time.time()\nprint(f\"NAR512: {string}\")\nprint(f\"Length of hashed value: {len(string)}\")\nprint(f\"Time taken for NAR512: {end_time - start_time} seconds\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "end_time = time.time()\nprint(f\"NAR512: {string}\")\nprint(f\"Length of hashed value: {len(string)}\")\nprint(f\"Time taken for NAR512: {end_time - start_time} seconds\")",
        "detail": "main",
        "documentation": {}
    }
]